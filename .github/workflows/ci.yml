name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate-branch:
    name: Validate Branch Name
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Check branch naming convention
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Validating branch name: $BRANCH_NAME"

        # Regex: type/ID-slug format (Conventional Commits aligned)
        # ID must have 3+ digits to avoid conflicts with simple numbers
        # Examples: feat/UI-001-dashboard, fix/MP-127-auth-bug, sec/SEC-015-webhook-validation
        PATTERN="^(feat|fix|perf|sec|docs|test|refactor|ci|build)\/[A-Z]+-[0-9]{3,}-[a-z0-9-]+$"

        if [[ ! "$BRANCH_NAME" =~ $PATTERN ]]; then
          echo "❌ FAILED: Branch name does not match required format"
          echo ""
          echo "Expected format: type/ID-slug"
          echo "  - type: feat|fix|perf|sec|docs|test|refactor|ci|build"
          echo "  - ID: Uppercase letters + hyphen + 3+ digits (e.g., UI-001, MP-127)"
          echo "  - slug: Lowercase with hyphens (e.g., dashboard-layout)"
          echo ""
          echo "Valid examples:"
          echo "  ✓ feat/UI-001-dashboard-layout"
          echo "  ✓ fix/MP-127-auth-redirect-bug"
          echo "  ✓ perf/PERF-042-bundle-optimization"
          echo "  ✓ sec/SEC-015-stripe-webhook-validation"
          echo ""
          echo "Your branch: $BRANCH_NAME"
          echo ""
          echo "See: docs/CONTRIBUTING.md for branch naming guidelines"
          echo "To fix: git branch -m NEW_BRANCH_NAME && git push origin -u NEW_BRANCH_NAME"
          exit 1
        fi

        echo "✅ PASSED: Branch name follows convention"
        echo "Branch: $BRANCH_NAME"

  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v6
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

    - name: Build production
      run: npm run build
      env:
        # Mock env vars for build (CI doesn't need real keys)
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Measure first-load JS (Playwright)
      if: matrix.node-version == '20.x'
      run: |
        echo "Installing Playwright for first-load measurement..."
        npx playwright install --with-deps chromium

        echo "Starting Next.js server in background..."
        npm start &
        SERVER_PID=$!

        echo "Waiting for server to be ready..."
        npx wait-on http://localhost:3000 --timeout 60000

        echo "Measuring first-load JS with Playwright..."
        FIRST_LOAD_BUDGET_KB=300 node scripts/ci/measure-first-load.mjs

        echo "Stopping server..."
        kill $SERVER_PID || true
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Upload first-load report
      if: matrix.node-version == '20.x' && always()
      uses: actions/upload-artifact@v4
      with:
        name: first-load-report
        path: first-load-report.json
        retention-days: 7

    - name: Upload build artifacts
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next/
        retention-days: 7

  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build application
      run: npm run build
      env:
        # Mock env vars for build
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Create accessibility test file
      run: |
        mkdir -p e2e
        cat > e2e/accessibility.spec.ts << 'EOL'
        import { test, expect } from '@playwright/test'
        import AxeBuilder from '@axe-core/playwright'

        test.describe('Accessibility Tests', () => {
          test('homepage accessibility', async ({ page }) => {
            await page.goto('http://localhost:3000')
            const results = await new AxeBuilder({ page }).analyze()

            expect(results.violations).toEqual([])

            if (results.violations.length > 0) {
              console.error('Accessibility violations found:')
              results.violations.forEach(violation => {
                console.error(`- ${violation.id}: ${violation.description}`)
                console.error(`  Impact: ${violation.impact}`)
                console.error(`  Affected elements: ${violation.nodes.length}`)
              })
            }
          })

          test('dashboard accessibility (unauthenticated)', async ({ page }) => {
            await page.goto('http://localhost:3000/dashboard')
            const results = await new AxeBuilder({ page }).analyze()

            expect(results.violations).toEqual([])
          })

          test('subscribe page accessibility', async ({ page }) => {
            await page.goto('http://localhost:3000/subscribe')
            const results = await new AxeBuilder({ page }).analyze()

            expect(results.violations).toEqual([])
          })
        })
        EOL

    - name: Install axe-core
      run: npm install --save-dev @axe-core/playwright

    - name: Start Next.js server
      run: npm start &
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Wait for server
      run: npx wait-on http://localhost:3000 --timeout 60000

    - name: Run accessibility tests
      run: npx playwright test e2e/accessibility.spec.ts

    - name: Upload accessibility results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: playwright-report/
        retention-days: 7
