name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Security: Explicitly set minimal permissions (principle of least privilege)
# Only grant write permissions to specific jobs that need them
permissions:
  contents: read  # Allow reading repository contents

jobs:
  validate-branch:
    name: Validate Branch Name
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Check branch naming convention
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        AUTHOR="${{ github.actor }}"
        echo "Validating branch name: $BRANCH_NAME"
        echo "PR author: $AUTHOR"

        # Skip validation for Dependabot branches
        if [[ "$BRANCH_NAME" =~ ^dependabot/ ]]; then
          echo "✅ SKIPPED: Dependabot branch (auto-generated)"
          exit 0
        fi

        # Regex: type/ID-slug format (Conventional Commits aligned)
        # ID must have 3+ digits to avoid conflicts with simple numbers
        # Examples: feat/UI-001-dashboard, fix/MP-127-auth-bug, sec/SEC-015-webhook-validation
        PATTERN="^(feat|fix|perf|sec|docs|test|refactor|ci|build)\/[A-Z]+-[0-9]{3,}-[a-z0-9-]+$"

        if [[ ! "$BRANCH_NAME" =~ $PATTERN ]]; then
          echo "❌ FAILED: Branch name does not match required format"
          echo ""
          echo "Expected format: type/ID-slug"
          echo "  - type: feat|fix|perf|sec|docs|test|refactor|ci|build"
          echo "  - ID: Uppercase letters + hyphen + 3+ digits (e.g., UI-001, MP-127)"
          echo "  - slug: Lowercase with hyphens (e.g., dashboard-layout)"
          echo ""
          echo "Valid examples:"
          echo "  ✓ feat/UI-001-dashboard-layout"
          echo "  ✓ fix/MP-127-auth-redirect-bug"
          echo "  ✓ perf/PERF-042-bundle-optimization"
          echo "  ✓ sec/SEC-015-stripe-webhook-validation"
          echo ""
          echo "Your branch: $BRANCH_NAME"
          echo ""
          echo "See: docs/CONTRIBUTING.md for branch naming guidelines"
          echo "To fix: git branch -m NEW_BRANCH_NAME && git push origin -u NEW_BRANCH_NAME"
          exit 1
        fi

        echo "✅ PASSED: Branch name follows convention"
        echo "Branch: $BRANCH_NAME"

  validate-commits:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for commit message validation

    - name: Validate commit message format
      run: |
        echo "Validating commit messages for PR #${{ github.event.pull_request.number }}"
        echo ""

        # Get all commits in the PR
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"

        # Conventional Commits regex
        # Format: type(scope): subject
        # Types: feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert
        PATTERN="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?!?: .+"

        FAILED=0
        COMMIT_COUNT=0

        # Loop through each commit in the PR
        for commit in $(git rev-list $BASE_SHA..$HEAD_SHA); do
          COMMIT_MSG=$(git log --format=%B -n 1 $commit | head -n 1)
          SHORT_SHA=$(git rev-parse --short $commit)
          COMMIT_COUNT=$((COMMIT_COUNT + 1))

          echo "[$COMMIT_COUNT] $SHORT_SHA: $COMMIT_MSG"

          # Check format
          if [[ ! "$COMMIT_MSG" =~ $PATTERN ]]; then
            echo "  ❌ INVALID: Does not follow Conventional Commits format"
            FAILED=$((FAILED + 1))
          else
            echo "  ✅ VALID"
          fi
          echo ""
        done

        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Validation Summary:"
        echo "  Total commits: $COMMIT_COUNT"
        echo "  Invalid: $FAILED"
        echo "  Valid: $((COMMIT_COUNT - FAILED))"

        if [ $FAILED -gt 0 ]; then
          echo ""
          echo "❌ FAILED: $FAILED commit(s) do not follow Conventional Commits format"
          echo ""
          echo "Expected format: type(scope): subject"
          echo "  - type: feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert"
          echo "  - scope: optional, e.g., (auth), (api), (ui)"
          echo "  - subject: Short description (lowercase, no period at end)"
          echo ""
          echo "Valid examples:"
          echo "  ✓ feat(auth): add Google OAuth login"
          echo "  ✓ fix(api): resolve webhook signature validation"
          echo "  ✓ docs: update README with setup instructions"
          echo "  ✓ refactor(ui): extract reusable button component"
          echo ""
          echo "See: https://www.conventionalcommits.org/"
          exit 1
        fi

        echo ""
        echo "✅ PASSED: All commit messages follow Conventional Commits format"

  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v6
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

    - name: Run unit tests
      run: npm run test:unit

    - name: Build production
      run: npm run build 2>&1 | tee build-output.txt
      env:
        # Mock env vars for build (CI doesn't need real keys)
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        ALLOW_FIREBASE_ADMIN_FALLBACK: "true"
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Measure first-load JS
      if: matrix.node-version == '20.x'
      run: |
        echo "Measuring first-load JS from build output..."
        FIRST_LOAD_BUDGET_KB=300 node scripts/ci/measure-first-load.mjs build-output.txt

    - name: Upload first-load report
      if: matrix.node-version == '20.x' && always()
      uses: actions/upload-artifact@v4
      with:
        name: first-load-report
        path: first-load-report.json
        retention-days: 7

    - name: Upload build artifacts
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next/
        retention-days: 7

  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true  # Temporarily non-blocking until landmark/heading issues are fixed

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build application
      run: npm run build
      env:
        # Mock env vars for build
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Start Next.js server
      run: npm start &
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ci-mock-key
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ci-mock.firebaseapp.com
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ci-mock-project
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ci-mock.appspot.com
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: ci-mock-app-id
        NEXT_PUBLIC_APP_URL: http://localhost:3000
        FIREBASE_PROJECT_ID: ci-mock-project
        FIREBASE_CLIENT_EMAIL: ci-mock@ci-mock.iam.gserviceaccount.com
        ALLOW_FIREBASE_ADMIN_FALLBACK: "true"
        FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1+fWIcPm15j9tXBWjdULHsUnDpJVBz0hLRqz4sLiJv7Jqx\n-----END PRIVATE KEY-----\n"
        STRIPE_SECRET_KEY: sk_test_ci_mock_key
        STRIPE_WEBHOOK_SECRET: whsec_ci_mock_secret
        STRIPE_PRICE_ID_PRO: price_ci_mock_id

    - name: Wait for server
      run: npx wait-on http://localhost:3000 --timeout 60000

    - name: Run accessibility tests
      run: npm run test:a11y

    - name: Upload accessibility results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: playwright-report/
        retention-days: 7
