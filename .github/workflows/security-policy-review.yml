name: Security Policy Review

# Monthly check for Snyk policy expiration (1st of each month at 9 AM UTC)
on:
  schedule:
    - cron: '0 9 1 * *'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  check-snyk-expiry:
    name: Check Snyk Policy Expiration
    runs-on: ubuntu-latest
    permissions:
      contents: read      # Required to checkout code
      issues: write       # Required to create/update security policy review issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Snyk policy expiration dates
        run: |
          echo "🔍 Checking Snyk policy expiration dates..."

          # Extract all expiration dates from .snyk file
          EXPIRY_DATES=$(grep -E "expires:" .snyk | sed -E "s/.*expires: ['\"]([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/" | sort -u)

          if [ -z "$EXPIRY_DATES" ]; then
            echo "✅ No expiry dates found in .snyk policy"
            exit 0
          fi

          # Warning threshold: 90 days before expiration
          WARN_DAYS=90
          TODAY=$(date +%s)
          WARNINGS=0

          echo ""
          echo "📅 Expiry dates found:"
          for EXPIRY_DATE in $EXPIRY_DATES; do
            echo "  - $EXPIRY_DATE"

            # Calculate days until expiration
            EXPIRY=$(date -d "$EXPIRY_DATE" +%s 2>/dev/null || date -j -f "%Y-%m-%d" "$EXPIRY_DATE" +%s)
            DAYS_UNTIL=$((($EXPIRY - $TODAY) / 86400))

            if [ $DAYS_UNTIL -lt 0 ]; then
              echo "    ❌ EXPIRED $((DAYS_UNTIL * -1)) days ago!"
              WARNINGS=$((WARNINGS + 1))
            elif [ $DAYS_UNTIL -lt $WARN_DAYS ]; then
              echo "    ⚠️  Expires in $DAYS_UNTIL days (less than $WARN_DAYS day threshold)"
              WARNINGS=$((WARNINGS + 1))
            else
              echo "    ✅ $DAYS_UNTIL days remaining"
            fi
          done

          echo ""
          if [ $WARNINGS -gt 0 ]; then
            echo "⚠️  ACTION REQUIRED: $WARNINGS Snyk policy suppression(s) need review!"
            echo ""
            echo "Next steps:"
            echo "1. Review .snyk file for suppressions nearing expiration"
            echo "2. Re-evaluate security findings (are they still false positives?)"
            echo "3. Update expiry dates or remove suppressions as appropriate"
            echo "4. See docs/SECURITY.md for security review guidelines"
            exit 1
          else
            echo "✅ All Snyk policy suppressions have valid expiry dates"
          fi

      - name: Comment on issue if policy review needed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const snykContent = fs.readFileSync('.snyk', 'utf8');
            const expiryDates = snykContent.match(/expires: ['"]([0-9]{4}-[0-9]{2}-[0-9]{2})/g) || [];

            const body = `## ⚠️ Snyk Security Policy Review Required

The automated security policy review has detected that one or more Snyk suppressions are nearing expiration or have expired.

**Action Required**:
1. Review the [\`.snyk\` policy file](https://github.com/${{ github.repository }}/blob/main/.snyk)
2. Re-evaluate suppressed security findings
3. Update expiry dates or remove suppressions as appropriate
4. Consult [docs/SECURITY.md](https://github.com/${{ github.repository }}/blob/main/docs/SECURITY.md) for security review guidelines

**Expiry dates found**:
${expiryDates.map(d => `- ${d.replace(/expires: ['"]/, '')}`).join('\n')}

**Background**:
Expiry dates on security suppressions prevent "set and forget" risk acceptance. This ensures security findings are periodically re-evaluated as the codebase and threat landscape evolve.

cc: @${context.repo.owner}
`;

            // Check if an issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,automated'
            });

            const existingIssue = issues.data.find(i =>
              i.title === '🔒 Quarterly Security Policy Review Required'
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `Updated: ${new Date().toISOString()}\n\n${body}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🔒 Quarterly Security Policy Review Required',
                body,
                labels: ['security', 'automated', 'maintenance']
              });
            }
